# pass PHP scripts to Fastcgi listening on Unix socket
# Do not process them if inside WP uploads directory
# If using Multisite or a custom uploads directory,
# please set the */uploads/* directory in the regex below
#location ~* (^(?!(?:(?!(php|inc)).)*/uploads/).*?(php)) {
#     try_files $uri = 404;
#     fastcgi_split_path_info ^(.+.php)(.*)$;
#     #fastcgi_pass unix:/var/run/php-fpm.socket;
#     fastcgi_pass 127.0.0.1:9000;
#     fastcgi_index index.php;
#     fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#     include fastcgi_params;
#     fastcgi_intercept_errors on;
#     fastcgi_ignore_client_abort off;
#     fastcgi_connect_timeout 60;
#     fastcgi_send_timeout 180;
#     fastcgi_read_timeout 180;
#     fastcgi_buffer_size 128k;
#     fastcgi_buffers 4 256k;
#     fastcgi_busy_buffers_size 256k;
#     fastcgi_temp_file_write_size 256k;
#}

# pass PHP scripts to Fastcgi listening on Unix socket
# Do not process them if inside WP uploads directory
# If using Multisite or a custom uploads directory,
# please set the */uploads/* directory in the regex below
location ~ .php$ {
     try_files $uri = 404;
     fastcgi_split_path_info ^(.+.php)(.*)$;
     #fastcgi_pass unix:/var/run/php-fpm.socket;
     fastcgi_pass 127.0.0.1:9000;
     fastcgi_index index.php;
     fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
     include fastcgi_params;
     fastcgi_intercept_errors on;
     fastcgi_ignore_client_abort off;
     fastcgi_connect_timeout 60;
     fastcgi_send_timeout 180;
     fastcgi_read_timeout 180;
     fastcgi_buffer_size 128k;
     fastcgi_buffers 4 256k;
     fastcgi_busy_buffers_size 256k;
     fastcgi_temp_file_write_size 256k;
}

location ~ ^/files/(.*)$ {
     try_files /wp-content/blogs.dir/$blogid/$uri /wp-includes/ms-files.php?file=$1;
     access_log on; 
     log_not_found on; 
     expires max;
}

#avoid php readfile()
location ^~ /blogs.dir {
     internal;
     alias /var/www/wordpress/wp-content/blogs.dir;
     access_log off; 
     log_not_found off; 
     expires max;
}

# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~* /(?:uploads|files)/.*\.php$ {
     deny all;
}

# Rewrite rules for WordPress Multi-site.
if (!-e $request_filename) {
     rewrite /wp-admin$ $scheme://$host$uri/ permanent;
     rewrite ^/[_0-9a-zA-Z-]+(/wp-.*) $1 last;
     rewrite ^/[_0-9a-zA-Z-]+(/.*\.php)$ $1 last;
}